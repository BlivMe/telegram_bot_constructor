<template>
  <div class="broadcasts-page">
    <h1>Рассылки</h1>

    <form @submit.prevent="submitBroadcast" class="broadcast-form">
      <textarea v-model="message" placeholder="Текст рассылки" rows="4" />
      <input type="file" @change="handleFile" />
      <button type="submit">Отправить рассылку</button>
    </form>

    <div v-if="broadcasts.length" class="broadcast-list">
      <h2>Прошлые рассылки</h2>
      <div v-for="b in broadcasts" :key="b.id" class="broadcast-item">
        <p>{{ b.message }}</p>
        <img v-if="b.image" :src="b.image" class="broadcast-image" />
        <small>{{ formatDate(b.creationdate) }}</small>
      </div>
    </div>
  </div>
</template>

<script>
import axios from "@/axios";

export default {
  name: "Broadcasts",
  data() {
    return {
      message: "",
      file: null,
      broadcasts: []
    };
  },
  created() {
    this.fetchBroadcasts();
  },
  methods: {
    getBotId() {
      return this.$route.params.botId || 1; // заменить на нужный источник bot_id
    },
    async fetchBroadcasts() {
      try {
        const res = await axios.get("/api/bots/broadcasts/", {
          params: { bot_id: this.getBotId() }
        });
        this.broadcasts = res.data;
      } catch (err) {
        console.error("Ошибка загрузки рассылок:", err);
      }
    },
    handleFile(event) {
      this.file = event.target.files[0];
    },
    async submitBroadcast() {
      if (!this.message && !this.file) {
        alert("Введите сообщение или прикрепите изображение.");
        return;
      }

      const formData = new FormData();
      formData.append("message", this.message);
      formData.append("bot", this.getBotId());
      if (this.file) {
        formData.append("image", this.file);
      }

      try {
        await axios.post("/api/bots/broadcasts/", formData);
        this.message = "";
        this.file = null;
        this.fetchBroadcasts();
      } catch (err) {
        console.error("Ошибка отправки рассылки:", err);
        alert("Не удалось отправить рассылку.");
      }
    },
    formatDate(dateStr) {
      return new Date(dateStr).toLocaleString();
    }
  }
};
</script>

<style scoped>
.broadcasts-page {
  max-width: 800px;
  margin: 30px auto;
  background: #fff;
  padding: 20px;
  border-radius: 20px;
  box-shadow: 0 0 8px rgba(0, 0, 0, 0.05);
}
.broadcast-form {
  display: flex;
  flex-direction: column;
  gap: 10px;
  margin-bottom: 30px;
}
.broadcast-form textarea {
  resize: vertical;
}
.broadcast-image {
  max-width: 100%;
  margin-top: 10px;
}
.broadcast-item {
  padding: 15px;
  border: 1px solid #eee;
  border-radius: 10px;
  margin-bottom: 15px;
}
</style>
